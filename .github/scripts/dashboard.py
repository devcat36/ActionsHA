#!/usr/bin/env python3
import os
import json
import base64
from datetime import datetime


class DashboardTemplates:
    """Templates for dashboard components"""
    
    @staticmethod
    def header(repo):
        """Generate dashboard header"""
        return f"""# ActionsHA Dashboard

[![HA Monitor](https://github.com/{repo}/actions/workflows/ha-monitor.yml/badge.svg)](https://github.com/{repo}/actions/workflows/ha-monitor.yml)

Last Updated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC

"""

    @staticmethod
    def overview_section(stats):
        """Generate overview section with statistics"""
        return f"""## üìà Overview

| Metric | Value |
|--------|-------|
| Total Services | {stats['total_services']} |
| Healthy Services | {stats['healthy_services']}/{stats['total_services']} ({stats['healthy_percentage']:.1f}%) |
| Total Servers | {stats['total_servers']} |
| Healthy Servers | {stats['healthy_servers']}/{stats['total_servers']} ({stats['servers_percentage']:.1f}%) |

"""

    @staticmethod
    def service_status_header():
        """Generate service status section header"""
        return "## üîç Service Status\n\n"

    @staticmethod
    def service_details(service_info):
        """Generate individual service details"""
        status_icon = "üü¢" if service_info['is_healthy'] else "üî¥"
        
        dns_status_map = {
            'ok': '‚úÖ Synced',
            'updated': 'üîÑ Updated',
            'mismatch': '‚ö†Ô∏è Mismatch',
            None: '‚ûñ N/A'
        }
        dns_display = dns_status_map.get(service_info['dns_status'], '‚ûñ N/A')
        
        template = f"""### {status_icon} {service_info['name']}

- **Endpoint**: `{service_info['endpoint']}`
- **Health**: {service_info['healthy_count']}/{service_info['total_count']} servers healthy
- **DNS Status**: {dns_display}

| Server | IP Address | Status |
|--------|------------|--------|
"""
        
        # Add server status rows
        for server_info in service_info['server_statuses']:
            template += f"| {server_info['server']} | `{server_info['ip']}` | {server_info['status']} |\n"
        
        template += "\n"
        return template


    @staticmethod
    def links_section(repo):
        """Generate links section"""
        return f"""## üîó Links

- [View Logs](https://github.com/{repo}/tree/main/logs)
- [Configuration](https://github.com/{repo}/blob/main/.github/ha-monitor-config.json)
- [Workflow Runs](https://github.com/{repo}/actions/workflows/ha-monitor.yml)

"""

    @staticmethod
    def footer(repo):
        """Generate dashboard footer"""
        return f"""---
*This dashboard is automatically generated by [HA Monitor](https://github.com/{repo}/blob/main/.github/workflows/ha-monitor.yml)*
"""


class DashboardBuilder:
    """Builder class for constructing the dashboard"""
    
    def __init__(self, config, health_results, dns_results):
        self.config = config
        self.health_results = health_results
        self.dns_results = dns_results
        self.templates = DashboardTemplates()
        self.repo = config['logging'].get('repository')
    
    def calculate_statistics(self):
        """Calculate dashboard statistics"""
        total_services = len(self.config.get('services', []))
        # Count total servers by resolving server references
        total_servers = 0
        for service in self.config.get('services', []):
            total_servers += len(service.get('servers', []))
        healthy_services = sum(1 for sr in self.health_results.values() if sr['failed_count'] == 0)
        healthy_servers = sum(len(sr.get('healthy_servers', [])) for sr in self.health_results.values())
        
        return {
            'total_services': total_services,
            'healthy_services': healthy_services,
            'healthy_percentage': (healthy_services / total_services * 100) if total_services > 0 else 0,
            'total_servers': total_servers,
            'healthy_servers': healthy_servers,
            'servers_percentage': (healthy_servers / total_servers * 100) if total_servers > 0 else 0
        }
    
    def build_service_info(self, service):
        """Build service information dictionary"""
        service_name = service['name']
        if service_name not in self.health_results:
            return None
        
        health_result = self.health_results[service_name]
        dns_result = self.dns_results.get(service_name, {})
        
        # Build server status list
        server_statuses = []
        servers = self.config.get('servers', [])
        for server_name in service.get('servers', []):
            # Find server by name in the list
            server = None
            for s in servers:
                if s['name'] == server_name:
                    server = s
                    break
            if not server:
                continue
            ip = server['ip']
            if server['name'] in health_result.get('healthy_servers', []):
                server_statuses.append({'server': server['name'], 'ip': ip, 'status': '‚úÖ Healthy'})
            else:
                server_statuses.append({'server': server['name'], 'ip': ip, 'status': '‚ùå Failed'})
        
        # Build endpoint string based on available fields
        if 'healthcheck_path' in service:
            scheme = service.get('scheme', 'http')
            endpoint = f"{scheme}://{service['hostname']}{service['healthcheck_path']}"
        else:
            # TCP port check - just show hostname:port
            port = service.get('port', '443' if service.get('scheme') == 'https' else '80')
            endpoint = f"{service['hostname']}:{port} (TCP)"
        
        return {
            'name': service['name'],
            'endpoint': endpoint,
            'is_healthy': health_result['failed_count'] == 0,
            'healthy_count': len(health_result.get('healthy_servers', [])),
            'total_count': len(service.get('servers', [])),
            'dns_status': dns_result.get('status'),
            'server_statuses': server_statuses
        }
    
    def build(self):
        """Build the complete dashboard content"""
        # Calculate statistics
        stats = self.calculate_statistics()
        
        # Start building dashboard
        content = self.templates.header(self.repo)
        content += self.templates.overview_section(stats)
        content += self.templates.service_status_header()
        
        # Add service details
        for service in self.config.get('services', []):
            service_info = self.build_service_info(service)
            if service_info:
                content += self.templates.service_details(service_info)
        
        # Add links and footer
        content += self.templates.links_section(self.repo)
        content += self.templates.footer(self.repo)
        
        return content


def generate_dashboard(config, health_results, dns_results):
    # Import requests here to avoid import errors when module is loaded
    import requests
    """Generate and update README dashboard"""
    print("\nüìä Generating dashboard...")
    
    repo = config['logging'].get('repository')
    token = os.environ.get('GITHUB_TOKEN')
    
    if not repo or not token:
        print("‚ùå Missing repository or GITHUB_TOKEN for dashboard")
        return
    
    try:
        # Build dashboard content using templates
        builder = DashboardBuilder(config, health_results, dns_results)
        readme_content = builder.build()
        
        # Update README via GitHub API
        readme_api_url = f"https://api.github.com/repos/{repo}/contents/README.md"
        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # Check if README exists
        existing_readme = requests.get(readme_api_url, headers=headers)
        
        # Prepare update
        readme_data = {
            'message': f'Update HA Monitor dashboard - {datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")} UTC',
            'content': base64.b64encode(readme_content.encode()).decode(),
            'branch': 'main'
        }
        
        if existing_readme.status_code == 200:
            readme_data['sha'] = existing_readme.json()['sha']
        
        # Update README
        readme_response = requests.put(readme_api_url, headers=headers, json=readme_data)
        
        if readme_response.status_code in [200, 201]:
            print("‚úÖ Dashboard updated successfully!")
            print(f"   View at: https://github.com/{repo}")
        else:
            print(f"‚ùå Failed to update dashboard: {readme_response.status_code} - {readme_response.text}")
            
    except Exception as e:
        print(f"‚ùå Error generating dashboard: {str(e)}")


if __name__ == "__main__":
    import sys
    
    # Read config
    with open('.github/ha-monitor-config.json', 'r') as f:
        config = json.load(f)
    
    # Read results from stdin
    data = json.loads(sys.stdin.read())
    health_results = data['health_results']
    dns_results = data['dns_results']
    
    # Generate dashboard
    generate_dashboard(config, health_results, dns_results)